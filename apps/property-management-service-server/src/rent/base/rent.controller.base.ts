/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RentService } from "../rent.service";
import { RentCreateInput } from "./RentCreateInput";
import { Rent } from "./Rent";
import { RentFindManyArgs } from "./RentFindManyArgs";
import { RentWhereUniqueInput } from "./RentWhereUniqueInput";
import { RentUpdateInput } from "./RentUpdateInput";

export class RentControllerBase {
  constructor(protected readonly service: RentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Rent })
  async createRent(@common.Body() data: RentCreateInput): Promise<Rent> {
    return await this.service.createRent({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Rent] })
  @ApiNestedQuery(RentFindManyArgs)
  async rents(@common.Req() request: Request): Promise<Rent[]> {
    const args = plainToClass(RentFindManyArgs, request.query);
    return this.service.rents({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Rent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async rent(
    @common.Param() params: RentWhereUniqueInput
  ): Promise<Rent | null> {
    const result = await this.service.rent({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Rent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRent(
    @common.Param() params: RentWhereUniqueInput,
    @common.Body() data: RentUpdateInput
  ): Promise<Rent | null> {
    try {
      return await this.service.updateRent({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Rent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRent(
    @common.Param() params: RentWhereUniqueInput
  ): Promise<Rent | null> {
    try {
      return await this.service.deleteRent({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
