/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Rent as PrismaRent } from "@prisma/client";

export class RentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RentCountArgs, "select">): Promise<number> {
    return this.prisma.rent.count(args);
  }

  async rents<T extends Prisma.RentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RentFindManyArgs>
  ): Promise<PrismaRent[]> {
    return this.prisma.rent.findMany<Prisma.RentFindManyArgs>(args);
  }
  async rent<T extends Prisma.RentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RentFindUniqueArgs>
  ): Promise<PrismaRent | null> {
    return this.prisma.rent.findUnique(args);
  }
  async createRent<T extends Prisma.RentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RentCreateArgs>
  ): Promise<PrismaRent> {
    return this.prisma.rent.create<T>(args);
  }
  async updateRent<T extends Prisma.RentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RentUpdateArgs>
  ): Promise<PrismaRent> {
    return this.prisma.rent.update<T>(args);
  }
  async deleteRent<T extends Prisma.RentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RentDeleteArgs>
  ): Promise<PrismaRent> {
    return this.prisma.rent.delete(args);
  }
}
