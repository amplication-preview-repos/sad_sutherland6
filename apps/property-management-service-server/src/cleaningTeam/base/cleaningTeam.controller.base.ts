/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CleaningTeamService } from "../cleaningTeam.service";
import { CleaningTeamCreateInput } from "./CleaningTeamCreateInput";
import { CleaningTeam } from "./CleaningTeam";
import { CleaningTeamFindManyArgs } from "./CleaningTeamFindManyArgs";
import { CleaningTeamWhereUniqueInput } from "./CleaningTeamWhereUniqueInput";
import { CleaningTeamUpdateInput } from "./CleaningTeamUpdateInput";

export class CleaningTeamControllerBase {
  constructor(protected readonly service: CleaningTeamService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CleaningTeam })
  async createCleaningTeam(
    @common.Body() data: CleaningTeamCreateInput
  ): Promise<CleaningTeam> {
    return await this.service.createCleaningTeam({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CleaningTeam] })
  @ApiNestedQuery(CleaningTeamFindManyArgs)
  async cleaningTeams(@common.Req() request: Request): Promise<CleaningTeam[]> {
    const args = plainToClass(CleaningTeamFindManyArgs, request.query);
    return this.service.cleaningTeams({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CleaningTeam })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cleaningTeam(
    @common.Param() params: CleaningTeamWhereUniqueInput
  ): Promise<CleaningTeam | null> {
    const result = await this.service.cleaningTeam({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CleaningTeam })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCleaningTeam(
    @common.Param() params: CleaningTeamWhereUniqueInput,
    @common.Body() data: CleaningTeamUpdateInput
  ): Promise<CleaningTeam | null> {
    try {
      return await this.service.updateCleaningTeam({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CleaningTeam })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCleaningTeam(
    @common.Param() params: CleaningTeamWhereUniqueInput
  ): Promise<CleaningTeam | null> {
    try {
      return await this.service.deleteCleaningTeam({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
