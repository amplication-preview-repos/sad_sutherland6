/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Mandate as PrismaMandate } from "@prisma/client";

export class MandateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MandateCountArgs, "select">): Promise<number> {
    return this.prisma.mandate.count(args);
  }

  async mandates<T extends Prisma.MandateFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MandateFindManyArgs>
  ): Promise<PrismaMandate[]> {
    return this.prisma.mandate.findMany<Prisma.MandateFindManyArgs>(args);
  }
  async mandate<T extends Prisma.MandateFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MandateFindUniqueArgs>
  ): Promise<PrismaMandate | null> {
    return this.prisma.mandate.findUnique(args);
  }
  async createMandate<T extends Prisma.MandateCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MandateCreateArgs>
  ): Promise<PrismaMandate> {
    return this.prisma.mandate.create<T>(args);
  }
  async updateMandate<T extends Prisma.MandateUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MandateUpdateArgs>
  ): Promise<PrismaMandate> {
    return this.prisma.mandate.update<T>(args);
  }
  async deleteMandate<T extends Prisma.MandateDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MandateDeleteArgs>
  ): Promise<PrismaMandate> {
    return this.prisma.mandate.delete(args);
  }
}
