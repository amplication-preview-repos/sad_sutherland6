/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Mandate } from "./Mandate";
import { MandateCountArgs } from "./MandateCountArgs";
import { MandateFindManyArgs } from "./MandateFindManyArgs";
import { MandateFindUniqueArgs } from "./MandateFindUniqueArgs";
import { DeleteMandateArgs } from "./DeleteMandateArgs";
import { MandateService } from "../mandate.service";
@graphql.Resolver(() => Mandate)
export class MandateResolverBase {
  constructor(protected readonly service: MandateService) {}

  async _mandatesMeta(
    @graphql.Args() args: MandateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Mandate])
  async mandates(
    @graphql.Args() args: MandateFindManyArgs
  ): Promise<Mandate[]> {
    return this.service.mandates(args);
  }

  @graphql.Query(() => Mandate, { nullable: true })
  async mandate(
    @graphql.Args() args: MandateFindUniqueArgs
  ): Promise<Mandate | null> {
    const result = await this.service.mandate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Mandate)
  async deleteMandate(
    @graphql.Args() args: DeleteMandateArgs
  ): Promise<Mandate | null> {
    try {
      return await this.service.deleteMandate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
