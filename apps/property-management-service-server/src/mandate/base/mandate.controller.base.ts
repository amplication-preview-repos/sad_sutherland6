/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MandateService } from "../mandate.service";
import { MandateCreateInput } from "./MandateCreateInput";
import { Mandate } from "./Mandate";
import { MandateFindManyArgs } from "./MandateFindManyArgs";
import { MandateWhereUniqueInput } from "./MandateWhereUniqueInput";
import { MandateUpdateInput } from "./MandateUpdateInput";

export class MandateControllerBase {
  constructor(protected readonly service: MandateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Mandate })
  async createMandate(
    @common.Body() data: MandateCreateInput
  ): Promise<Mandate> {
    return await this.service.createMandate({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Mandate] })
  @ApiNestedQuery(MandateFindManyArgs)
  async mandates(@common.Req() request: Request): Promise<Mandate[]> {
    const args = plainToClass(MandateFindManyArgs, request.query);
    return this.service.mandates({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Mandate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mandate(
    @common.Param() params: MandateWhereUniqueInput
  ): Promise<Mandate | null> {
    const result = await this.service.mandate({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Mandate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMandate(
    @common.Param() params: MandateWhereUniqueInput,
    @common.Body() data: MandateUpdateInput
  ): Promise<Mandate | null> {
    try {
      return await this.service.updateMandate({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Mandate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMandate(
    @common.Param() params: MandateWhereUniqueInput
  ): Promise<Mandate | null> {
    try {
      return await this.service.deleteMandate({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
